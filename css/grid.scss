$block-size: 80; //Change this value
$scrollbar-size: 13;

$grid-cell-height: ($block-size * 2) * 80 /100+px;

body {
	background-color: #ffb30024;
	font-family: Inconsolata, monospace;
}

body::-webkit-scrollbar {
	width: $scrollbar-size + px;
	background: #ffb30024;
}

body::-webkit-scrollbar-thumb {
	background-color: #438ac9;
	border-radius: 10px;
	box-shadow: inset 0 0 100px 50px #0c5492;
}

#hexGrid {
	display: grid;
	width: auto;
	justify-content: center;
	grid-auto-flow: dense;
	grid-template-columns: repeat(14, $block-size + px);
	grid-template-rows: repeat(auto-fit,
			minmax($grid-cell-height, $grid-cell-height));
	grid-auto-rows: $grid-cell-height;
	margin-bottom: ($block-size * 2) * 30 /100 + px;
}

#hexGrid>* {
	-webkit-clip-path: polygon(50% 0, 95% 25%, 95% 75%, 50% 100%, 5% 75%, 5% 25%);
	clip-path: polygon(50% 0, 95% 25%, 95% 75%, 50% 100%, 5% 75%, 5% 25%);
}

.hex,
.emptyHex {
	position: relative;
	height: 2 * $block-size + px;
	width: 2 * $block-size + px;
	grid-column: 2 span;
	display: flex;
	align-items: center;
	justify-content: center;
	font-weight: bold;
	font-style: italic;
	font-size: ($block-size/3) + px;
}

.hex {
	background-color: #438ac9;
	border: 2px solid #ffd203;
	//Este mÃ©todo no permite border porque el hexÃ¡gono se genera desde un clipping path, no es la forma real de la celda
	box-shadow: inset 0 0 $block-size + px ($block-size/10) + px #0c5492;
	transition: clip-path 300ms, background-color 300ms;
	color: #156ab4;

	&:hover {
		background-color: #80bff7;
	}
}

.emptyHex {
	background-color: transparent;
	color: transparent;
}

@media screen and (max-width: #{3 * $block-size - 1 + $scrollbar-size}px) {
	#hexGrid {
		grid-template-columns: repeat(14, $block-size + px);
		grid-template-rows: ($block-size * 2) + px;
		grid-auto-rows: ($block-size * 2) + px;
		margin-bottom: ($block-size * 2) * 30 /100 + px;
	}

	.hex {
		-webkit-clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0 50%);
		clip-path: polygon(25% 5%, 75% 5%, 100% 50%, 75% 95%, 25% 95%, 0 50%);
	}
}

/*
.hex-jumper{
	grid-column: 2 / span 2;
}
*/

.jump-row {
	grid-column: 2 / span 2;
	grid-column-start: 1
}


@for $i from ($block-size * 3) through 2000 {
	@if ($i % $block-size==0) {
		$counter: $i / $block-size;

		@media screen and (min-width: #{($counter) * $block-size + $scrollbar-size}px) and (max-width: #{($counter + 1) * $block-size - 1 + $scrollbar-size}px) {
			$first: floor($counter / 2) + 1;

			.hex:nth-child(#{$first}),
			.hex:nth-child(#{$counter - 1}n + #{$counter + $first - 1}) {
				grid-column: 2 / span 2;
			}
		}
	}
}


//CSS not relevant to the grid
$pointer-offset: -63%;
$pointer-offset-hover: -20%;

body {
	overflow-x: hidden;
}

.hex {
	&::after {
		content: "ðŸ‘†";
		position: absolute;
		font-style: normal;
		font-size: ($block-size) + px;
		transform: rotate(90deg);
		left: $pointer-offset;
		transition: left 300ms, bottom 300ms, right 300ms, top 300ms;
		text-shadow: 8px -3px 5px black;
	}

	&:hover:after {
		left: $pointer-offset-hover;
	}

	&:nth-child(2n) {
		&::after {
			transform: rotate(180deg);
			left: unset;
			top: $pointer-offset;
		}

		&:hover:after {
			top: $pointer-offset-hover;
			bottom: unset;
		}
	}

	&:nth-child(3n) {
		&::after {
			transform: rotate(-90deg);
			left: unset;
			top: unset;
			right: $pointer-offset;
		}

		&:hover:after {
			right: $pointer-offset-hover;
			bottom: unset;
			top: unset;
		}
	}

	&:nth-child(4n) {
		&::after {
			transform: rotate(0deg);
			left: unset;
			top: unset;
			right: unset;
			bottom: $pointer-offset;
		}

		&:hover:after {
			left: unset;
			top: unset;
			right: unset;
			bottom: $pointer-offset-hover;
		}
	}
}